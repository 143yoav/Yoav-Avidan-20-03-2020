{"version":3,"sources":["reducers/weatherReducer.js","store/configStore.js","reducers/themeReducer.js","serviceWorker.js","components/common/NaviLink/NaviLink.js","components/common/Toggle/Toggle.js","utils/api.js","formatters/weatherFormmater.js","actions/weather.js","components/Header/Header.js","actions/theme.js","components/common/TextSelect/TextSelect.js","components/common/IconImg/IconImg.js","components/HomePage/DayWeather/DayWeather.js","components/HomePage/CurrentWeather/CurrentWeatherValue/CurrentWeatherValue.js","components/HomePage/CurrentWeather/CurrentWeather.js","components/HOC/withLoading.js","components/HomePage/WeatherContainer/WeatherContainer.js","components/HomePage/HomePage.js","components/FavoritesPage/FavoriteWeatherData/FavoriteWeatherData.js","components/FavoritesPage/FavoriteWeather/FavoriteWeather.js","components/FavoritesPage/FavoritesPage.js","components/AppRouter/AppRouter.js","index.js"],"names":["weatherReducerDefaultState","cityKey","config","defaultCityKey","cityName","defaultCityName","isMetric","favorites","reducer","weather","state","action","type","city","key","name","some","fav","filter","localStorage","setItem","JSON","stringify","theme","configureStore","middleware","thunk","Boolean","window","location","hostname","match","NaviLink","props","to","className","data-selected","isSelected","value","Toggle","uncheckedLabel","Switch","checked","isChecked","onChange","event","target","classes","track","checkedLabel","Get","url","a","params","apikey","apiKey","axios","get","response","formatDaysData","data","formatted","DailyForecasts","map","day","push","moment","Date","format","unit","Temperature","Minimum","Unit","min","Value","max","Maximum","icon","Day","Icon","formatCurrentData","metric","text","WeatherText","WeatherIcon","formatAutocompleteData","result","Key","LocalizedName","country","Country","getPosition","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","currentLocationSuccess","position","coords","latitude","longitude","geopositionURL","q","setCurrentCity","AdministrativeArea","EnglishName","toast","error","currentLocationError","getCurrentWeather","currentWeatherURL","getDailyWeather","daysWeatherURL","getAutocompleteSearch","autocompleteURL","connect","isLight","dispatch","updateUnit","updateTheme","useLocation","pathname","TextSelect","placeholder","isClearable","isSearchable","getOptionLabel","option","classNamePrefix","options","onInputChange","val","onSelect","IconImg","index","src","weatherIconsPre","weatherIconsSuf","DayWeather","CurrentWeatherValue","updateFavorite","isFav","isClick","onClick","withLoading","WrappedComponent","this","isFetching","CircularProgress","colorPrimary","React","Component","days","current","HomePage","searchResults","fetchData","setState","all","then","onTextChanged","search","length","minSearchLength","onCitySelect","prevProps","isFetch","FavoriteWeather","history","withRouter","createBrowserHistory","getCurrentLocation","pos","catch","loadFavorites","getItem","parse","useEffect","configure","POSITION","BOTTOM_RIGHT","classNames","path","component","exact","FavoritesPage","ReactDOM","render","store","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.782fd298.chunk.js","sourcesContent":["import config from '../config.json';\n\nconst weatherReducerDefaultState = {\n  cityKey: config.defaultCityKey,\n  cityName: config.defaultCityName,\n  isMetric: true,\n  favorites: []\n};\n\nexport default (state = weatherReducerDefaultState, action) => {\n  switch (action.type) {\n    case 'SET_CURRENT':\n      return {\n        ...state,\n        cityKey: action.city.key,\n        cityName: action.city.name\n      };\n    case 'UPDATE_FAVORITE':\n      if (state.favorites.some(fav => fav.key == action.fav.key)) {\n        let favorites = state.favorites.filter(\n          fav => fav.key != action.fav.key\n        );\n        localStorage.setItem('favorites', JSON.stringify(favorites));\n        return {\n          ...state,\n          favorites\n        };\n      } else {\n        localStorage.setItem(\n          'favorites',\n          JSON.stringify([...state.favorites, action.fav])\n        );\n        return {\n          ...state,\n          favorites: [...state.favorites, action.fav]\n        };\n      }\n    case 'UPDATE_UNIT':\n      return {\n        ...state,\n        isMetric: action.isMetric\n      };\n    case 'LOAD_FAVORITES':\n      return {\n        ...state,\n        favorites: action.favorites\n      };\n    default:\n      return state;\n  }\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport weatherReducer from '../reducers/weatherReducer';\nimport themeReducer from '../reducers/themeReducer';\n\nconst reducer = {\n  weather: weatherReducer,\n  theme: themeReducer\n};\n\nexport default configureStore({\n  reducer,\n  middleware: [thunk]\n});\n","const themeReducerDefaultState = 'light';\n\nexport default (state = themeReducerDefaultState, action) => {\n  switch (action.type) {\n    case 'UPDATE_THEME':\n      return action.theme;\n    default:\n      return state;\n  }\n};\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport './NaviLink.scss';\n\nconst NaviLink = props => (\n  <NavLink to={props.to} className=\"NaviLink\" data-selected={props.isSelected}>\n    {props.value}\n  </NavLink>\n);\n\nNaviLink.propTypes = {\n  to: PropTypes.string,\n  isSelected: PropTypes.bool,\n\n  value: PropTypes.string\n};\n\nexport default NaviLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Switch from '@material-ui/core/Switch';\nimport './Toggle.scss';\n\nconst Toggle = props => {\n  const onChange = event => {\n    props.onChange(event.target.checked);\n  };\n\n  return (\n    <div className=\"Toggle__Wrapper\">\n      <label>{props.uncheckedLabel}</label>\n      <Switch\n        checked={props.isChecked}\n        onChange={onChange}\n        classes={{ checked: 'Toggle-checked', track: 'Toggle-track' }}\n      ></Switch>\n      <label>{props.checkedLabel}</label>\n    </div>\n  );\n};\n\nToggle.propTypes = {\n  uncheckedLabel: PropTypes.string,\n  isChecked: PropTypes.bool,\n  onChange: PropTypes.func,\n  checkedLabel: PropTypes.string\n};\n\nexport default Toggle;\n","import axios from 'axios';\nimport config from '../config.json';\n\nexport const Get = async (url, params = {}) => {\n  try {\n    params.apikey = config.apiKey;\n    const response = await axios.get(url, { params });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n","import moment from 'moment';\n\nexport const formatDaysData = data => {\n  if (!data) {\n    return [];\n  }\n\n  var formatted = [];\n\n  data.DailyForecasts.map(day => {\n    formatted.push({\n      day: moment(day.Date).format('ddd'),\n      unit: day.Temperature.Minimum.Unit,\n      min: day.Temperature.Minimum.Value,\n      max: day.Temperature.Maximum.Value,\n      icon: day.Day.Icon < 10 ? '0' + day.Day.Icon : day.Day.Icon\n    });\n  });\n\n  return formatted;\n};\n\nexport const formatCurrentData = (data, metric = true) => {\n  if (!data[0]) {\n    return {};\n  }\n  data = data[0];\n  const unit = metric ? 'Metric' : 'Imperial';\n\n  return {\n    text: data.WeatherText,\n    unit: data.Temperature[unit].Unit,\n    value: data.Temperature[unit].Value,\n    icon: data.WeatherIcon < 10 ? '0' + data.WeatherIcon : data.WeatherIcon\n  };\n};\n\nexport const formatAutocompleteData = data => {\n  if (!data) {\n    return [];\n  }\n\n  var formatted = [];\n\n  data.map(result => {\n    formatted.push({\n      key: result.Key,\n      city: result.LocalizedName,\n      country: result.Country.LocalizedName,\n      text: `${result.LocalizedName}, ${result.Country.LocalizedName}`\n    });\n  });\n\n  return formatted;\n};\n","import { Get } from '../utils/api';\nimport config from '../config.json';\nimport {\n  formatCurrentData,\n  formatDaysData,\n  formatAutocompleteData\n} from '../formatters/weatherFormmater';\nimport { toast } from 'react-toastify';\n\nexport const getCurrentLocation = () => {\n  return dispatch => {\n    getPosition()\n      .then(async pos => {\n        dispatch(await currentLocationSuccess(pos));\n      })\n      .catch(() => {\n        dispatch(currentLocationError());\n      });\n  };\n};\n\nconst getPosition = () => {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n  });\n};\n\nconst currentLocationSuccess = async position => {\n  try {\n    const { latitude, longitude } = position.coords;\n    const result = await Get(config.geopositionURL, {\n      q: `${latitude},${longitude}`\n    });\n\n    return setCurrentCity(\n      result.data.AdministrativeArea.EnglishName,\n      result.data.Key\n    );\n  } catch (error) {\n    toast.error('Error getting current location');\n    return currentLocationError();\n  }\n};\n\nconst currentLocationError = () => {\n  toast.error('Error getting current location');\n  return setCurrentCity(config.defaultCityName, config.defaultCityKey);\n};\n\nexport const getCurrentWeather = async (cityKey, isMetric) => {\n  try {\n    const result = await Get(`${config.currentWeatherURL}${cityKey}`);\n    return formatCurrentData(result.data, isMetric);\n  } catch (error) {\n    toast.error('Error getting current weather');\n  }\n};\n\nexport const getDailyWeather = async (cityKey, metric) => {\n  try {\n    const result = await Get(`${config.daysWeatherURL}${cityKey}`, { metric });\n    return formatDaysData(result.data);\n  } catch (error) {\n    toast.error('Error getting daily weather');\n  }\n};\n\nexport const getAutocompleteSearch = async text => {\n  try {\n    const result = await Get(`${config.autocompleteURL}`, { q: text });\n    return formatAutocompleteData(result.data);\n  } catch (error) {\n    toast.error('Error getting search results');\n  }\n};\n\nexport const setCurrentCity = (name, key) => ({\n  type: 'SET_CURRENT',\n  city: { name, key }\n});\n\nexport const updateFavorite = (city, key) => ({\n  type: 'UPDATE_FAVORITE',\n  fav: { city, key }\n});\n\nexport const updateUnit = isMetric => ({\n  type: 'UPDATE_UNIT',\n  isMetric\n});\n\nexport const loadFavorites = () => ({\n  type: 'LOAD_FAVORITES',\n  favorites: localStorage.getItem('favorites')\n    ? JSON.parse(localStorage.getItem('favorites'))\n    : []\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport NaviLink from '../common/NaviLink/NaviLink';\nimport Toggle from '../common/Toggle/Toggle';\nimport { updateUnit } from '../../actions/weather';\nimport { updateTheme } from '../../actions/theme';\nimport './Header.scss';\n\nconst Header = props => {\n  const location = useLocation();\n\n  return (\n    <div className=\"Header__Wrapper\">\n      <span className=\"Header__Title\">Herolo Weather Task</span>\n      <div className=\"Header__Unit\">\n        <Toggle\n          checkedLabel=\"°C\"\n          uncheckedLabel=\"°F\"\n          isChecked={props.isMetric}\n          onChange={checked => props.updateUnit(checked)}\n        />\n      </div>\n      <div className=\"Header__Theme\">\n        <Toggle\n          checkedLabel=\"Light\"\n          uncheckedLabel=\"Dark\"\n          isChecked={props.isLight}\n          onChange={checked => props.updateTheme(checked)}\n        />\n      </div>\n      <div className=\"Header__Navigation\">\n        <NaviLink to={'/'} value=\"Home\" isSelected={location.pathname == '/'} />\n        <NaviLink\n          to={'/favorites'}\n          value=\"Favorites\"\n          isSelected={location.pathname == '/favorites'}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isMetric: state.weather.isMetric,\n  isLight: state.theme == 'light'\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateUnit: isMetric => dispatch(updateUnit(isMetric)),\n  updateTheme: theme => dispatch(updateTheme(theme))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","export const updateTheme = theme => ({\n  type: 'UPDATE_THEME',\n  theme: theme ? 'light' : 'dark'\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport './TextSelect.scss';\n\nconst TextSelect = props => {\n  return (\n    <Select\n      placeholder={props.placeholder}\n      isClearable\n      isSearchable\n      getOptionLabel={option => option.text}\n      className=\"TextSelect__Input\"\n      classNamePrefix=\"TextSelect\"\n      name=\"text\"\n      options={props.options}\n      onInputChange={val => props.onChange(val)}\n      onChange={val => props.onSelect(val)}\n    />\n  );\n};\n\nTextSelect.propTypes = {\n  placeholder: PropTypes.string,\n  options: PropTypes.arrayOf(PropTypes.object),\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func\n};\n\nexport default TextSelect;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport config from '../../../config.json';\n\nconst IconImg = ({ index }) => {\n  return (\n    <img src={`${config.weatherIconsPre}${index}${config.weatherIconsSuf}`} />\n  );\n};\n\nIconImg.propTypes = {\n  index: PropTypes.string\n};\n\nexport default IconImg;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconImg from '../../common/IconImg/IconImg';\nimport './DayWeather.scss';\n\nconst DayWeather = ({ day, max, min, unit, icon }) => {\n  return (\n    <div className=\"DayWeather__Wrapper\">\n      <div className=\"DayWeather__Day\">{day}</div>\n      <IconImg index={icon} className=\"DayWeather__Icon\" />\n      <div className=\"DayWeather__Temps\">\n        <label>\n          {min} °{unit}\n        </label>\n        <label>-</label>\n        <label>\n          {max} °{unit}\n        </label>\n      </div>\n    </div>\n  );\n};\n\nDayWeather.propTypes = {\n  day: PropTypes.string,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  unit: PropTypes.string,\n  icon: PropTypes.number\n};\n\nexport default DayWeather;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconImg from '../../../common/IconImg/IconImg';\nimport './CurrentWeatherValue.scss';\n\nconst CurrentWeatherValue = ({ icon, city, value, unit }) => {\n  return (\n    <div className=\"CurrentWeatherValue__Wrapper\">\n      {icon && <IconImg index={icon} />}\n      <label>{city}</label>\n      <label>\n        {value} °{unit}\n      </label>\n    </div>\n  );\n};\n\nCurrentWeatherValue.propTypes = {\n  icon: PropTypes.number,\n  city: PropTypes.string,\n  value: PropTypes.string,\n  unit: PropTypes.string\n};\n\nexport default CurrentWeatherValue;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport CurrentWeatherValue from './CurrentWeatherValue/CurrentWeatherValue';\nimport Heart from 'react-animated-heart';\nimport { updateFavorite } from '../../../actions/weather';\nimport './CurrentWeather.scss';\n\nconst CurrentWeather = props => {\n  const { city, index, favorites, text } = props;\n  const isFav = favorites.some(fav => fav.key == index);\n\n  return (\n    <div className=\"CurrentWeather__Wrapper\">\n      <CurrentWeatherValue {...props} className=\"CurrentWeather__Value\" />\n      <div className=\"CurrentWeather__Favorite\">\n        <Heart\n          isClick={isFav}\n          onClick={() => props.updateFavorite(city, index)}\n        />\n      </div>\n      <div className=\"CurrentWeather__Text\">{text}</div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  city: state.weather.cityName,\n  index: state.weather.cityKey,\n  favorites: state.weather.favorites\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateFavorite: (city, key) => dispatch(updateFavorite(city, key))\n});\n\nCurrentWeather.propTypes = { text: PropTypes.string };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentWeather);\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport './withLoading.scss';\n\nconst withLoading = WrappedComponent =>\n  class extends React.Component {\n    render() {\n      return this.props.isFetching ? (\n        <CircularProgress classes={{ colorPrimary: 'withLoading__Spinner' }} />\n      ) : (\n        <WrappedComponent {...this.props} />\n      );\n    }\n  };\n\nexport default withLoading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DayWeather from '../DayWeather/DayWeather';\nimport CurrentWeather from '../CurrentWeather/CurrentWeather';\nimport withLoading from '../../HOC/withLoading';\nimport './WeatherContainer.scss';\n\nconst WeatherContainer = ({ days, current }) => {\n  return (\n    <div className=\"WeatherContainer__Wrapper\">\n      <div className=\"WeatherContainer__Current\">\n        <CurrentWeather {...current} />\n      </div>\n      <div className=\"WeatherContainer__Days\">\n        {days && days.map(day => <DayWeather {...day} />)}\n      </div>\n    </div>\n  );\n};\n\nWeatherContainer.propTypes = {\n  days: PropTypes.array,\n  current: PropTypes.object\n};\n\nexport default withLoading(WeatherContainer);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TextSelect from '../common/TextSelect/TextSelect';\nimport WeatherContainer from './WeatherContainer/WeatherContainer';\nimport {\n  getCurrentWeather,\n  getDailyWeather,\n  getAutocompleteSearch,\n  setCurrentCity\n} from '../../actions/weather';\nimport config from '../../config.json';\nimport './HomePage.scss';\n\nclass HomePage extends Component {\n  state = {\n    searchResults: [],\n    days: [],\n    current: [],\n    isFetching: false\n  };\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.cityKey != this.props.cityKey ||\n      prevProps.isMetric != this.props.isMetric\n    ) {\n      this.fetchData(this.props.cityKey);\n    }\n  }\n\n  componentDidMount() {\n    this.fetchData(this.props.cityKey);\n  }\n\n  fetchData = key => {\n    this.setState({ isFetching: true });\n    Promise.all([\n      getCurrentWeather(key, this.props.isMetric),\n      getDailyWeather(key, this.props.isMetric)\n    ]).then(result => {\n      if (result[0] && result[1]) {\n        this.setState({\n          current: result[0],\n          days: result[1],\n          isFetching: false\n        });\n      }\n    });\n  };\n\n  onTextChanged = search => {\n    if (search.length >= config.minSearchLength) {\n      getAutocompleteSearch(search).then(searchResults =>\n        this.setState({ searchResults })\n      );\n    } else {\n      this.setState({ searchResults: [] });\n    }\n  };\n\n  onCitySelect = ({ city, key }) => {\n    this.props.setCurrentCity(city, key);\n    this.fetchData(key);\n  };\n\n  render() {\n    return (\n      <div className=\"HomePage__Wrapper\">\n        <TextSelect\n          placeholder=\"city\"\n          options={this.state.searchResults}\n          onChange={this.onTextChanged}\n          onSelect={this.onCitySelect}\n        />\n        <WeatherContainer\n          isFetch\n          days={this.state.days}\n          current={this.state.current}\n          isFetching={this.state.isFetching}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  cityKey: state.weather.cityKey,\n  isMetric: state.weather.isMetric\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentCity: (name, key) => dispatch(setCurrentCity(name, key))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconImg from '../../common/IconImg/IconImg';\nimport withLoading from '../../HOC/withLoading';\nimport './FavoriteWeatherData.scss';\n\nconst FavoriteWeatherData = ({ cityName, value, unit, icon, text }) => {\n  return (\n    <div className=\"FavoriteWeatherData__Wrapper\">\n      <label>{cityName}</label>\n      <label>\n        {value} °{unit}\n      </label>\n      <IconImg index={icon} />\n      <label>{text}</label>\n    </div>\n  );\n};\n\nFavoriteWeatherData.propTypes = {\n  cityName: PropTypes.string,\n  value: PropTypes.number,\n  unit: PropTypes.string,\n  icon: PropTypes.number,\n  title: PropTypes.string\n};\n\nexport default withLoading(FavoriteWeatherData);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport PropTypes from 'prop-types';\nimport FavoriteWeatherData from '../FavoriteWeatherData/FavoriteWeatherData';\nimport { getCurrentWeather, setCurrentCity } from '../../../actions/weather';\nimport './FavoriteWeather.scss';\n\nclass FavoriteWeather extends Component {\n  state = {\n    isFetching: false,\n    data: {}\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.isMetric != this.props.isMetric) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    this.setState({ isFetching: true });\n    getCurrentWeather(this.props.cityKey, this.props.isMetric).then(data => {\n      if (data) {\n        this.setState({ isFetching: false, data });\n      }\n    });\n  };\n\n  onClick = event => {\n    const { cityKey, city } = this.props;\n    this.props.setCurrentCity(city, cityKey);\n    this.props.history.push('/');\n  };\n\n  render() {\n    const { value, unit, icon, text } = this.state.data;\n\n    return (\n      <div className=\"FavoriteWeather__Wrapper\" onClick={this.onClick}>\n        <FavoriteWeatherData\n          isFetching={this.state.isFetching}\n          cityName={this.props.city}\n          value={value}\n          unit={unit}\n          icon={icon}\n          text={text}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isMetric: state.weather.isMetric\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentCity: (name, key) => dispatch(setCurrentCity(name, key))\n});\n\nFavoriteWeather.propTypes = {\n  cityKey: PropTypes.string,\n  city: PropTypes.string\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(FavoriteWeather));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes, { array } from 'prop-types';\nimport FavoriteWeather from './FavoriteWeather/FavoriteWeather';\nimport './FavoritesPage.scss';\n\nconst FavoritesPage = ({ favorites }) => {\n  return (\n    <div className=\"FavoritesPage__Wrapper\">\n      {favorites &&\n        favorites.map(fav => (\n          <FavoriteWeather cityKey={fav.key} city={fav.city} />\n        ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  favorites: state.weather.favorites\n});\n\nFavoritesPage.propTypes = {\n  favorites: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport default connect(mapStateToProps)(FavoritesPage);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport classNames from 'classnames';\nimport Header from '../Header/Header';\nimport HomePage from '../HomePage/HomePage';\nimport FavoritesPage from '../FavoritesPage/FavoritesPage';\nimport { getCurrentLocation, loadFavorites } from '../../actions/weather';\nimport { toast } from 'react-toastify';\nimport './AppRouter.scss';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst history = createBrowserHistory();\n\nconst AppRouter = props => {\n  useEffect(() => {\n    props.getCurrentLocation();\n    props.loadFavorites();\n    toast.configure({ position: toast.POSITION.BOTTOM_RIGHT });\n  }, []);\n\n  return (\n    <Router history={history}>\n      <div className={classNames('AppRouter__Wrapper', `theme-${props.theme}`)}>\n        <Header />\n        <Switch>\n          <Route path=\"/\" component={HomePage} exact />\n          <Route path=\"/favorites\" component={FavoritesPage} exact />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nconst mapStateToProps = state => ({\n  theme: state.theme\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCurrentLocation: () => dispatch(getCurrentLocation()),\n  loadFavorites: () => dispatch(loadFavorites())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppRouter);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './store/configStore';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppRouter from './components/AppRouter/AppRouter';\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <AppRouter />\r\n  </Provider>,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}